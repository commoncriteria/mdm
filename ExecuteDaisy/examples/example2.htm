<?xml version="1.0" encoding="UTF-8"?><diffreport><css><link href="http://cocoondev.org/resources/skins/daisysite/css/daisy.css" type="text/css" rel="stylesheet"/></css><diff><p>Google is hosting a <a href="http://code.google.com/soc/">Summer of Code</a> again, and Daisy has been accepted as a <a href="http://code.google.com/soc/daisy/about.html">qualifying open source project</a>.</p><p>What does that mean? Well, if you are a student, and your proposal qualifies, and your contribution is considered worthwhile, then you can get paid to contribute to Daisy: 4500 US$, no less! You'll find much more information about the program in the Google SoC <a href="http://code.google.com/soc/studentfaq.html">Student FAQ</a>.</p><p>We will use this page to list some work area ideas. Please keep in mind that it is you - the student - who needs to file a proposal with Google SoC, so our list isn't exhaustive or limiting.</p><p>We advise candidates to register themselves on the mailing-list, to discuss their ideas. (see <a href="daisy:45-cd">community page</a> for details)</p><p class="warn">The SoC student registration page is available <a href="http://code.google.com/soc/student_step1.html">from here</a>.</p><h1>Student requirements</h1><p>The nice peeps of Drupal have posted a rather relevant list of student requirements which we'll copy over here. Make sure to properly inform yourself about the program!</p><ol><li>You must not overbook yourself. Working on your Daisy project should be your main activity for the entire summer.</li><li>You must be willing to provide regular status reports (weekly or bi-weekly). </li><li>You will be expected to learn about source code control and open source collaboration tools (in Daisy's case, that's Subversion and mailing lists, mainly)</li></ol><p>Furthermore, <a href="http://drupal.org/node/59037">this page</a> gives you some ideas about how to file a proposal with Daisy.</p><h1><span class="diff-html-removed" id="removed-diff-0" previous="first-diff" changeId="removed-diff-0" next="removed-diff-1">Daisy SoC sightings</span></h1><ul><li><span class="diff-html-removed" previous="first-diff" changeId="removed-diff-0" next="removed-diff-1">Outerthought will be present at the TermiLan party of the nearby Ghent University (23-25 March) to advocate the GSOC program and advise students on their application.</span></li></ul><h1><span class="diff-html-removed" previous="first-diff" changeId="removed-diff-0" next="removed-diff-1">Previous Daisy SoC Projects</span></h1><p><span class="diff-html-removed" previous="first-diff" changeId="removed-diff-0" next="removed-diff-1">In 2006 Daisy ended up with two projects (and one drop out). See the results of those in our </span><a href="http://svn.cocoondev.org/viewsvn/contrib/gsoc2006/"><span class="diff-html-removed" previous="first-diff" changeId="removed-diff-0" next="removed-diff-1">subversion repository</span></a><span class="diff-html-removed" previous="first-diff" changeId="removed-diff-0" next="removed-diff-1">.</span></p><ul><li><span class="diff-html-removed" previous="first-diff" changeId="removed-diff-0" next="removed-diff-1">Tim Cranfield gave a first shot on the Detachment client.</span></li><li><span class="diff-html-removed" previous="first-diff" changeId="removed-diff-0" next="removed-diff-1">And Kostiantyn Sokolinskyi made a php integration.</span></li></ul><h1>Suggested project ideas for 2007</h1><h2>Daisy Google Goodies</h2><ul><li>integrate with <a href="http://code.google.com/enterprise/">Google OneBox</a> (search API)<a href="http://code.google.com/enterprise/"><br/></a></li><li>create a <a href="http://www.google.com/webmasters/sitemaps/docs/en/about.html">Google Sitemap</a> extension</li></ul><h2>ODF Integration</h2><p>The <a href="http://en.wikipedia.org/wiki/OpenDocument">Open Document Format</a> is gaining much attention and a growing momentum in the (non Microsoft part of the) industry.  Of course, by virtue of the integrated Apache Lucene, we are already properly indexing these files, but more could be done. <br/> With the 2.x release of OpenOffice as the de facto open reference implementation there is also somewhat of a oss-project-bridge-crossing opportunity in seeking to implement more ODF support into Daisy.</p><p>The non limiting list of various ways to integrate looks like this:</p><ul><li>generartion of ODF as an alternative to PDF for each document in the repository</li><li>ODF generating "publication type" for the daisy-books</li><li>import of ODF documents, converting them into wiki-editable documents</li><li>round-trip editing through open-office of these documents (which is not unlike the detachment idea in the end)</li></ul><p>If you are interested in this project, you should:</p><ul><li>be ready to get deep into the ODF XML specification and work out how things could get mapped onto Daisy documents</li><li>be proficient in XSLT and or Java/SAX to code the optimal conversions</li></ul><h2>WebDAV and/or JSR170 access to the repository</h2><p>Daisy has a fair number of unique selling points and has brought some innovative approaches into the CMS scene. </p><ul><li>our one 'bag' plus metadata approach</li><li>our opoen ReST based XML/HTTP API allowing other language bindings</li><li>a working SQL like query language</li><li>the bundled wiki approach as a default solution for the common authoring issues</li><li>the book publication and rendering</li><li>...</li></ul><p>While thriving to be unique and setting us appart from competition it is however not a goal to isolate us from other movements and standards in the area of content management.</p><p>Two much cited standard ways to integrate with a content-repository to date are the WebDAV protocol and the Java Content Repository APi (aka JCR or JSR170) <br/> Providing some way of mapping the nouns and verbs from these specifications to our own ReST based API is an interesting exercise that should lead to an optional service to be deployed and ran (in the case of WebDAV) or an actual API mapping component (in the case of JCR).</p><p>Mapping the implied hierarchy of these standards to the flat structure of the Daisy repository should be as flexible as the current navigation-tree editing. </p><p>If you are interested in this project, you should:</p><ul><li>be ready to get deep into the WebDAV and/or JCR specifications and our own ReST API on the other hand</li><li>be a seasoned Java developer that knows his XML and Web API's</li></ul><h2>HTML diff (compare) component</h2><p>This project is a research-level project for an ambitious, self-motivated student.</p><h3>Background</h3><p>The main content type used for textual content in Daisy is a subset of HTML which is also well-formed XML (technically, it's not XHTML since it's not in the XHTML namespace).</p><p>Much like a source code version control system, in Daisy a version history of documents is kept. Being able to compare the content of these versions is very useful. Currently the diffs shown in Daisy are based on the HTML source text (just try Page Action -&gt; Versions in the menu on top of this page to see an example). It would be very nice to have graphical diffs instead, thus simply a HTML document with changes, additions and deletions marked (a bit like the change tracking in word processors).</p><h3>Project notes</h3><ul><li>the project result should be a Java library which takes two HTML (well-formed XML) files as input and delivers one marked-up HTML file as result. </li><li>this project is independent from Daisy, the student doesn't need to learn anything about Daisy. If the project succeeds successfully, Daisy developers will be happy to integrate it.</li><li>the diff should work with the XML structure of the documents, not some simpler tokenization which might not interpret the document structure correctly. </li><li>a good start point would probably be to investigate current products to see how they approach the problem.</li></ul><h2 id="detachment">Daisy books enhancements</h2><p>Daisy contains a book-publishing module, whose purpose is to publish nice "books" from Daisy documents in a variety of formats (currently HTML and PDF). The books are produced in batch, the result is a set of static files.</p><p>A variety of enhancements can be done to this module:</p><ul><li>producing OpenOffice Writer / ODF format (some overlap with the ODF proposal, but see next point)</li><li>using the OpenOffice API to produce formats such as PDF or MS-Word.</li><li>experiment with latest Apache FOP for PDF production</li><li>for the HTML publication:</li><ul><li>fulltext search solution (various possibilities: e.g. produce a Lucene index during the book publication, relying on the presence of a server-side something to search the index, or even better produce an index which is loaded &amp; searched by client-side javascript, so avoiding the need to have something server-side installed)</li><li>enhance the presentation: e.g. show the table of contents on each page</li></ul><li>...</li></ul><h2 id="detachment">New commenting system</h2><p>Daisy currently includes a very simple system to add comments to documents. There is lot of room for enhancement here.</p><p>Some ideas:</p><ul><li>allow to associate/attach comments with parts of the documents (e.g. individual paragraphs or headers). For a nice example, <a href="http://www.djangobook.com/en/beta/chapter15/">see here</a>.</li><li>allow threaded comments</li><li>allow to edit comments afterwards</li><li>translate links in comments to clickable text (e.g. "daisy:" and "http:" should be translated to links)</li><ul><li>or allow very simple richt-text (just pargraphs, bullets, links, bold, ... editor should load very fast)</li></ul><li>allow searching on comments (both searching in the content of comments, as well as identifiers for the query language to retrieve e.g. the number of comments a document has)</li><li>allow comments by anonymous (guest) users, i.e. it should then be possible for commenters to leave name, email and url.</li><li>...</li></ul><h2 id="detachment">Daisy *DE*tachment client</h2><p>People coming from classic office environments are easily lured into the benefits of centralized content management by the ease of use of the daisy wysiwyg editor.  Without losing a recognisable content authoring environment they are happy to find:</p><ol><li>one centrally managed version of things</li><li>allowing easy collaboration</li><li>and a fully operational search</li></ol><p>just to name a few. <br/> The cost to pay for all of this however is that people always need to be online/connected to participate in the authoring-collaboration process.</p><p>One of the possible solutions to the offline authoring has been dubbed the Daisy Detachment and is assumed to work like this:</p><ul><li>from the repository a detachment is retrieved as a zip containing</li><ul><li>the part-content of course in bare format (and with known mimetype)</li><li>additional metadata about the document (fields, versions, variants, ...) </li><li>additional metadata about the repository server managing it</li><li>possibly additional metadata about the doctype the document complies to</li><li>possibly additional metadata about the kind of lock contained in this detachment</li></ul><li>during it's detached life this zip can be mailed over to anyone, and authored off-line through the 'detachment client'</li><li>this client (registered to open on the daisy-detachment mimetype and/or file extension) should allow</li><ul><li>to visualize the mentioned metadata</li><li>allow modifications to it (probably maintaining the original as well for optimistic locking support)</li><li>spawn an appropriate content editor for the various parts that are first unzipped to some temp directory, and rezipped into the 'detachment' when the detachment-client is closed</li><li>maybe check/revalidate the lock when online</li><li>allow to 'save to the repository' when online</li><li>could probably be launched/installed via java-webstart as part of the online daisy-wiki</li></ul></ul><p>If you are interested in this project, you should:</p><ul><li>know how to build decent Java Gui applications that can integrate with the most common desktop environments (the client itself is probably minimal and should thus not get in the way)</li><li>be ready to get deep into the data-structure of the daisy-repository to decide what minimal part of the related data to a given document variant will allow a maximal set of tempting features</li></ul><p>In the 2006 edition of GSoC a first stab at this client was created.  The code however needs an overhoal and further completion:</p><ul><li>bring it up to date with the 2.0 version of the repository</li><li>change to reuse the format (and code) from the import-export tool if applicable</li><li>provide a better desktop integration experience for various platforms (windows, linux and Mac)</li><li>get it into shape to be shipped with the next Daisy Release</li></ul><h2>Integration of Daisy in non-Java environments.</h2><p class="note">In GSOC 2006 we had a student that created a PHP library.</p><p>Daisy has a language-neutral <a href="daisy:21-cd@daisydocs-1_5">HTTP/XML-based API</a> to access its stand-alone repository server.</p><p>Daisy has also (of course) a native Java API wich can work in-JVM or remotely (transparently communicating over the HTTP/XML API), as illustrated in <a href="daisy:41-cd@daisydocs-1_5">this diagram</a>. Currently most Daisy-API usage (that we are aware of) makes use of these Java APIs.</p><p>It would be interesting to integrate facilities for the publication of content stored in the Daisy repository in non-Java-environments. For example Ruby(-on-Rails), Python or Mono/.NET.</p><p>In the first place content publication facilities (i.e. retrieval only) would be interesting, but support for updating content would also be interesting.</p><p>You could start out by experimenting a little bit with doing HTTP calls, and some XSL-based (or whatever) styling in the target language of choice. However, the goal of this project should rather be the development of a library or framework which makes such things quick and simple to use. Probably some useful feedback about the usability of Daisy's HTTP-API will also evolve from this project.</p><p>For use with Mono or .NET, it would also be interesting if the existing repository client Java code could be run transparently on these VMs.</p><p>If you are interested in this project, you should:</p><ul><li>have knowledge about the target language of choice, since Daisy developers won't be able to help you much with that</li><li>have knowledge about XML and related technologies (XML namespaces, XSL), and the APIs to process them in the selected language (or be willing to learn about them on your own)</li><li>much Java knowledge is not really needed, since you could consider the repository server to be a black-box</li></ul><h2>Expanding the administration section</h2><p>In Daisy's administration section it is currently possible to administrer collections, users, document types, ACLs and so forth. However the web based administration is far from complete.</p><h3>Sites</h3><p>A Daisy instance can have any number of sites. These sites typically have a homepage, navigation, skin, ... Currently administrators must have shell access to the hosting server to create and configure sites. Creating sites can be done by creating a number of directories and files or by calling a script which pretty much does the work for you. Typically when admins wish to modify sites they will edit xml files.</p><p>A nice addition to the administration frontend would be the administration of Daisy sites. Administrators should then be able to create update and delete sites. A basic implementation would be to allow the admins to edit settings found in the <a href="daisy:23-cd@daisydocs-2_0">siteconf.xml</a> and <a href="daisy:196-cd@daisydocs-2_0">skinconf.xml</a>. Should you finish this quickly and still feeling frisky then you might also have a shot at the faceted browser configurations found in the site. Each 'browser' if configured or defined by a single xml file. This file is used to specify which facets apply, what the default conditions are, which styling can be used, etc.</p><h3>Import/Export</h3><p>Recently Daisy has been improved to be able to make exports and import documents from other repositories. Again administrators would need shell access to do the export and import actions.<br/> Typically the administrator would want to be able to specify which documents would need to be exported/importend and with which options. If you are interested in what the current possibilities are have a look <a href="daisy:334-cd@daisydocs-2_0">here</a> or <a href="daisy:335-cd@daisydocs-2_0">here.</a></p><p>If you are up for the task you'll be getting your hands dirty with</p><ul><li>Daisy wiki frontend.</li><li>cocoon. The forms framework cforms to be more specific.</li><li>xml, xsd and how to process them.</li></ul><h2>Other ideas</h2><ul><li>Ajax enhanced authoring environment (should be more then just graphical effects though) possibly evolving into a pure browser direct repository-client (which would involve bypassing much of the cocoon-side logic)</li><li>Spellchecker support (on client and maybe even on server: JMS process listening to new submits?)</li><li>Translation support (keeping in sync variants in different languages)</li><li><span class="diff-html-removed" id="removed-diff-1" previous="removed-diff-0" changeId="removed-diff-1" next="added-diff-0">Provide extra administration screens to make the complete toolset (import, export, site-init,...backup) accessible via the browser.</span></li><li>Dojofication of the wiki frontend application.</li><li>Database independence layer</li><li>Extension for Web App Mixin / Form Builder &amp; Custom Form Handling</li><li>(yours here)</li></ul><h1><span class="diff-html-added" id="added-diff-0" previous="removed-diff-1" changeId="added-diff-0" next="last-diff">The mentors</span></h1><ul><li><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff">Marc Portier</span></li><li><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff">Steven Noels</span></li><li><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff">Paul Focke</span></li><li><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff">Bruno Dumon</span></li></ul><h1><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff">For the Belgian students</span></h1><h2><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff">Daisy SoC sightings</span></h2><p><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff">Outerthought will be present at the TermiLan party of the nearby Ghent University (23-25 March) to advocate the GSOC program and advise students on their application.</span></p><h2><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff">Flyer (click to enlarge)</span></h2><table width="100%" class="borderless"><tbody><tr><td><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff"> </span><a href="http://farm1.static.flickr.com/109/312867392_d1064e9a98_o.jpg"><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff"><img src="http://farm1.static.flickr.com/109/312867392_d1064e9a98_m.jpg" changeType="diff-added-image"/></span></a><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff"> </span></td><td><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff"> </span><a href="http://farm1.static.flickr.com/104/312867255_3b2e671eaf_o.jpg"><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff"><img src="http://farm1.static.flickr.com/104/312867255_3b2e671eaf_m.jpg" changeType="diff-added-image"/></span></a><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff"> </span></td></tr></tbody></table><h1><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff">Previous Daisy SoC Projects</span></h1><h2><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff">2006</span></h2><p><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff">In 2006 Daisy ended up with two projects (and one drop out). See the results of those in our </span><a href="http://svn.cocoondev.org/viewsvn/contrib/gsoc2006/"><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff">subversion repository</span></a><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff">.</span></p><ul><li><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff">Tim Cranfield gave a first shot on the Detachment client.</span></li><li><span class="diff-html-added" previous="removed-diff-1" changeId="added-diff-0" next="last-diff">And Kostiantyn Sokolinskyi made a PHP client library.</span></li></ul></diff></diffreport>